# Dialog implementation generated from reading ui file 'ui/camera.ui'
#
# Created by: PyQt6 UI code generator 6.6.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtCore import QTimer
from PyQt5.QtGui import QPixmap,QImage
import cv2

import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import GUI.thongbao as tb
from demo import CNNModel
import os
import cv2
import numpy as np
import ex

class Ui_Form(object):
    def setupUi(self, Dialog, id, type=1):
        #Khai báo
        self.tb = tb.Ui_Dialog()
        self.id = id
        self.type = type
        self.parent_directory = f'data/khachhang/{id}'
        self.Dialog = Dialog
        self.count = 0
        
        # self.name = next(os.walk(self.parent_directory))[1]
        
        Dialog.setObjectName("Dialog")
        Dialog.resize(800, 550)
        Dialog.setMaximumSize(QtCore.QSize(900, 600))
        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(parent=Dialog)
        self.label.setMinimumSize(QtCore.QSize(0, 510))
        self.label.setText("")
        self.label.setScaledContents(True)
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        
        #Chạy tiến trình nhận diện
        self.btnDetect = QtWidgets.QPushButton(parent=Dialog)
        self.btnDetect.setMinimumSize(QtCore.QSize(180, 30))
        self.btnDetect.setMaximumSize(QtCore.QSize(180, 30))
        self.btnDetect.setObjectName("btnDetect")
        self.horizontalLayout.addWidget(self.btnDetect)
        self.btnDetect.clicked.connect(self.detect)

        #Chạy tiến trình lưu ảnh
        self.btnStart = QtWidgets.QPushButton(parent=Dialog)
        self.btnStart.setMinimumSize(QtCore.QSize(180, 30))
        self.btnStart.setMaximumSize(QtCore.QSize(180, 30))
        self.btnStart.setObjectName("btnStart")
        self.horizontalLayout.addWidget(self.btnStart)
        self.btnStart.clicked.connect(self.start_capture)
        
        #Tắt camera
        self.btnClose = QtWidgets.QPushButton(parent=Dialog)
        self.btnClose.setMinimumSize(QtCore.QSize(180, 30))
        self.btnClose.setMaximumSize(QtCore.QSize(180, 30))
        self.btnClose.setObjectName("btnClose")
        self.horizontalLayout.addWidget(self.btnClose)
        self.btnClose.clicked.connect(self.close_dialog)
        
        #Xoá ảnh trong kho lưu trữ
        self.btnDelete = QtWidgets.QPushButton(parent=Dialog)
        self.btnDelete.setMinimumSize(QtCore.QSize(180, 30))
        self.btnDelete.setMaximumSize(QtCore.QSize(180, 30))
        self.btnDelete.setObjectName("btnDelete")
        self.horizontalLayout.addWidget(self.btnDelete)
        self.btnDelete.clicked.connect(self.delete_directory)
        
        
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout.addLayout(self.horizontalLayout)
        
        self.camera = cv2.VideoCapture(0)
        
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_frame)
        self.timer.start(50)
        
        self.timer_capture = QTimer()
        self.timer_capture.timeout.connect(self.chup_anh)
        
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        
        if self.type == 2:
            self.parent_directory = f'data/thunuoi/{id}'

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.btnDetect.setText(_translate("Dialog", "Nhận diện"))
        self.btnStart.setText(_translate("Dialog", "Thu thập dữ liệu nhận diện"))
        self.btnClose.setText(_translate("Dialog", "Đóng"))
        self.btnDelete.setText(_translate("Dialog", "Xoá dữ liệu"))

    def update_frame(self):
        self.face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
        ret, frame = self.camera.read()
        if ret:
            # Chuyển đổi hình ảnh từ BGR sang RGB để hiển thị trong PyQt5
            frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame_rgb = cv2.resize(frame_rgb,(900,600))
            
            self.faces = self.face_cascade.detectMultiScale(frame_rgb, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
            for (x, y, w, h) in self.faces:
                cv2.rectangle(frame_rgb, (x, y), (x+w, y+h), (255, 0, 0), 2)
            
            image = QImage(frame_rgb.data, frame_rgb.shape[1], frame_rgb.shape[0], QImage.Format_RGB888)
            pixmap = QPixmap.fromImage(image)
            
            self.label.setPixmap(pixmap)
    
    def detect(self):
        if self.type == 1:
            object = 'khachhang'
        else:
            object = 'thunuoi'
        ex.detect(object)

    def start_capture(self):
        # Bắt đầu lập lịch chụp ảnh bằng cách bật QTimer
        self.timer_capture.start(300)
            
    def chup_anh(self):
        self.btnStart.setText("Đang lưu ảnh....!")
        ret , frame = self.camera.read()
        self.check_directory()
        if ret:
            self.faces = self.face_cascade.detectMultiScale(frame, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
            if len(self.faces) !=0:
                if self.count == 50:
                    self.tb.thongBao("Đã lưu dữ liệu gương mặt hoàn tất!")
                    self.count= 0
                    self.timer_capture.stop()
                    self.btnStart.setText("Bắt đầu")
                else:
                    for (x, y, w, h) in self.faces:
                        face_image = frame[y:y+h, x:x+w]
                        # face_image = cv2.cvtColor(face_image,cv2.COLOR_BAYER_BRG2)
                        self.count += 1  
                        cv2.imwrite(f'{self.parent_directory}/{self.id}_{self.count}.png',face_image)
                        
                        img1 = self.phongTo(face_image)
                        cv2.imwrite(f'{self.parent_directory}/{self.id}_phongto_{self.count}.png',img1)
                        
                        img2 = self.doimau(face_image)
                        cv2.imwrite(f'{self.parent_directory}/{self.id}_doimau_{self.count}.png',img2)
                        
                        img3 = self.doChoi(face_image)
                        cv2.imwrite(f'{self.parent_directory}/{self.id}_dochoi_{self.count}.png',img3)
                        
                        img4 = self.latNgang(face_image)
                        cv2.imwrite(f'{self.parent_directory}/{self.id}_latngang_{self.count}.png',img4)
                        
            
        
    def check_directory(self):
        if not os.path.exists(self.parent_directory):
                os.makedirs(self.parent_directory)  
            
    
    def close_dialog(self):
        self.camera.release()
        self.Dialog.close()
        
    def delete_directory(self):
        try:
            os.remove(self.parent_directory)
            self.tb.thongBao("Đã xoá thư mục thành công !")
        except OSError as e:
            self.tb.thongBao(f"Lỗi: {self.parent_directory} - {e.strerror}")
        
        
    def xoayAnh(self,img):
        angle = 30
        rows, cols = img.shape[:2]
        M = cv2.getRotationMatrix2D((cols / 2, rows / 2), angle, 1)
        rotated_img = cv2.warpAffine(img, M, (cols, rows))
        return rotated_img

    def phongTo(self,img):
        scale_percent = 200  
        width = int(img.shape[1] * scale_percent / 100)
        height = int(img.shape[0] * scale_percent / 100)
        resized_img = cv2.resize(img, (width, height))
        return resized_img

    def latNgang(self,img):
        flipped_img = cv2.flip(img, 1)  # Lật theo chiều ngang
        return flipped_img

    def doChoi(self,img):
        brightness = 80
        contrast = 0.5
        adjusted_img = cv2.convertScaleAbs(img, alpha=contrast, beta=brightness)
        return adjusted_img

    def doimau(self,img):
        hsv_img = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)
        hue_shift = 20
        hsv_img[:, :, 0] = (hsv_img[:, :, 0] + hue_shift) % 180
        color_shifted_img = cv2.cvtColor(hsv_img, cv2.COLOR_HSV2BGR)  
        return color_shifted_img      



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Form()
    ui.setupUi(Dialog,4)
    Dialog.show()
    sys.exit(app.exec())
